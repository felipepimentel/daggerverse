# Cursor Rules for Daggerverse

## Commit Message Format

```
type(scope): subject

[optional body]

[optional footer(s)]
```

## Types

- `feat`: A new feature (minor version)
  - New functionality in module APIs
  - New configuration options
  - New tools or integrations
- `fix`: A bug fix (patch version)
  - Bug fixes in module functionality
  - Corrections in configuration handling
  - Environment variable fixes
- `perf`: A code change that improves performance (patch version)
  - Cache optimizations
  - Build speed improvements
  - Resource usage optimizations
- `docs`: Documentation only changes (patch version)
  - README updates
  - Code comments
  - Module documentation
- `style`: Changes that do not affect the meaning of the code
  - Formatting
  - White-space
  - Missing semi-colons
- `refactor`: A code change that neither fixes a bug nor adds a feature
  - Code reorganization
  - Renaming
  - Moving files
- `test`: Adding missing tests or correcting existing tests
  - Unit tests
  - Integration tests
  - Test configuration
- `build`: Changes that affect the build system or external dependencies
  - Dagger configuration
  - Dependencies updates
  - Build process changes
- `ci`: Changes to our CI configuration files and scripts
  - GitHub Actions workflows
  - Release configuration
  - CI/CD pipeline changes
- `chore`: Other changes that don't modify src or test files
  - Maintenance tasks
  - Cleanup activities
  - Administrative changes

## Scopes

- `python`: Changes to the Python module
  - Poetry integration
  - PyPI publishing
  - Testing framework
  - Documentation tools
- `nodejs`: Changes to the Node.js module
  - npm integration
  - Package publishing
  - Testing setup
- `ruby`: Changes to the Ruby module
  - Bundler integration
  - Gem publishing
  - Testing configuration
- `global`: Repository-wide changes
  - CI/CD workflows
  - Documentation standards
  - Common configurations

## Breaking Changes

Breaking changes must be indicated by:

1. `!` after the type/scope
2. `BREAKING CHANGE:` in the footer

Example:

```
feat(python)!: change module API interface

BREAKING CHANGE: The BuildConfig interface now requires explicit cache configuration.
Previous cache configuration will need to be updated to use the new CacheConfig struct.

Migration guide:
- Replace cache boolean flags with CacheConfig struct
- Update cache volume names if custom ones were used
- Review cache mounting points in custom configurations
```

## Examples

### Features

```
feat(python): add support for custom test runners
- Add TestConfig struct for configuration
- Implement parallel test execution
- Add coverage reporting options
- Support test markers and paths

feat(python): implement documentation generation
- Add Sphinx and MkDocs support
- Configure multiple output formats
- Enable theme customization
- Support various documentation extensions
```

### Bug Fixes

```
fix(python): resolve PyPI token handling
- Update token environment variable format
- Add validation for token presence
- Improve error messages for missing tokens

fix(global): correct environment variable syntax
- Replace process.env with env in configs
- Update variable references in workflows
- Fix path handling in release process
```

### Documentation

```
docs(python): improve API documentation
- Add usage examples for all features
- Document configuration options
- Include troubleshooting guide
- Add migration instructions

docs(global): update project guidelines
- Clarify commit message format
- Add scope definitions
- Include breaking change examples
- Document release process
```

## Rules

1. Subject line:

   - Must be in present tense
   - Must not end with a period
   - Must be 72 characters or less
   - Must start with lowercase
   - Should be clear and descriptive
   - Should complete the sentence "This commit will..."

2. Body:

   - Must have a blank line after subject
   - Each line must be 72 characters or less
   - Should explain what and why, not how
   - Use bullet points for multiple items
   - Include context when necessary
   - Reference issues and PRs when relevant

3. Breaking Changes:

   - Must include both `!` and `BREAKING CHANGE:` footer
   - Must describe the breaking change in detail
   - Must provide migration instructions
   - Should explain the reason for the change
   - Include examples of before and after
   - List all affected components

4. Scope:
   - Must be one of the defined scopes
   - Must be lowercase
   - Must be in parentheses
   - Should be as specific as possible
   - Use 'global' for repository-wide changes
   - Match the module being modified

## Automatic Versioning

Commits will trigger version updates based on:

- `feat(python)`: Minor version (1.1.0)
  - New features
  - New configuration options
  - New integrations
- `fix(python)`: Patch version (1.0.1)
  - Bug fixes
  - Security updates
  - Performance improvements
- `perf(python)`: Patch version (1.0.1)
  - Optimizations
  - Performance fixes
- `docs(python)`: Patch version (1.0.1)
  - Documentation updates
  - Example additions
- Breaking change: Major version (2.0.0)
  - API changes
  - Behavior changes
  - Configuration format changes

## Tag Format

Tags will be generated in the format:

```
<module>/v<version>
Examples:
- python/v1.2.3
- nodejs/v0.1.0
- ruby/v2.0.0
```

## Changelog Management

The CHANGELOG.md file:

- Is automatically updated
- Uses Keep a Changelog format
- Groups changes by type
- Includes version numbers
- Links to relevant issues/PRs
- Documents breaking changes
