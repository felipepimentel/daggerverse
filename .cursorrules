# Cursor Rules for Daggerverse

## Commit Message Format

```
type(scope): subject

[optional body]

[optional footer(s)]
```

## Types

- `feat`: A new feature (minor version)
  - New functionality in reusable modules
  - New integrations with Dagger
  - Enhancements to CI/CD logic in `.dagger/`
- `fix`: A bug fix (patch version)
  - Fixes in module logic
  - Corrections in auto-generated configurations
  - Workflow or script fixes
- `perf`: A code change that improves performance (patch version)
  - Optimizations in reusable modules
  - Workflow performance improvements
  - Build efficiency updates
- `docs`: Documentation only changes (patch version)
  - Updates to README or module-specific documentation
  - Comments explaining module behaviors
  - Changes in documentation for `.dagger/` workflows
- `style`: Non-functional changes to code style
  - Formatting adjustments
  - Linting fixes
  - Naming conventions
- `refactor`: Code changes without feature addition or bug fix
  - Module structure reorganization
  - Internal logic improvements
  - Redundant code removal
- `test`: Adding or fixing tests
  - Unit tests for modules
  - Workflow tests
  - Integration tests for Dagger pipelines
- `build`: Changes in build configuration or dependencies
  - Updates to `go.mod` or `go.sum`
  - Adjustments in Dagger development setup
  - Build script modifications
- `ci`: Updates to CI/CD configuration
  - Workflow improvements in `.dagger/`
  - GitHub Actions configurations
  - Release process updates
- `chore`: Repository maintenance or minor updates
  - Cleanup tasks
  - Administrative changes
  - Dependency updates without code modifications

## Scopes

- `go`: Changes to reusable Go modules
  - New module creation
  - Refactoring of existing modules
  - Optimizations and bug fixes
- `dagger`: Changes to Dagger workflows and configurations
  - Updates in `.dagger/`
  - CI/CD logic refinements
  - Workflow automation enhancements
- `internal`: Internal auto-generated components
  - Handling of `dagger.gen.go`
  - Updates to files in `internal/` (only regenerated via `dagger develop`)
- `global`: Repository-wide changes
  - Updates impacting multiple modules
  - Adjustments to project structure
  - Common configurations or standards

## Protected Files and Directories

- **`internal/`**: Auto-generated directory. Do not modify files inside this directory manually. Regenerate it using `dagger develop` when changes are required.
- **`dagger.gen.go`**: Auto-generated file. Any modifications must be done by rerunning `dagger develop`. Direct edits are prohibited.

## Breaking Changes

Breaking changes must follow these guidelines:

1. Add `!` after the type/scope in the commit header.
2. Include a `BREAKING CHANGE:` section in the commit footer.
3. Provide a clear explanation of the change, its impact, and migration instructions.

Example:

```
feat(dagger)!: update Dagger workflow API

BREAKING CHANGE: The workflow structure now requires a `dagger.yml` configuration.
Ensure all workflows include this file in the root of `.dagger/` before running pipelines.
```

## Rules

### Commit Messages

1. **Subject Line:**

   - Use the present tense (e.g., "Add feature", not "Added feature").
   - Keep it concise (72 characters or fewer).
   - Avoid ending with a period.
   - Ensure it is descriptive and follows the format: `type(scope): subject`.

2. **Body:**

   - Provide context when necessary.
   - Explain _what_ and _why_, not _how_.
   - Use bullet points for multiple changes or detailed descriptions.

3. **Breaking Changes:**
   - Explicitly mark with `!` and `BREAKING CHANGE:`.
   - Provide a migration guide if applicable.

### Tagging

Tags should follow this format:

```
<module>/v<version>
Examples:
- go/v1.0.0
- dagger/v0.2.1
```

### Automatic Versioning

- **`feat`:** Increments minor version (e.g., 1.1.0).
- **`fix` or `perf`:** Increments patch version (e.g., 1.0.1).
- **Breaking changes:** Increments major version (e.g., 2.0.0).

### Changelog Management

- Use the [Keep a Changelog](https://keepachangelog.com/) format.
- Group changes by type and scope.
- Link to relevant issues/PRs for context.
- Highlight breaking changes in a dedicated section.

### File and Directory Management

1. **Project Structure:**

   - Each reusable module must reside in its own directory under the root.
   - CI/CD workflows should be defined entirely within `.dagger/`.

2. **Protected Components:**

   - **Do not manually edit** `dagger.gen.go` or files in `internal/`.
   - Regenerate these files using `dagger develop` as necessary.

3. **Directory Responsibilities:**
   - **`.dagger/`:** Primary location for workflow logic and automation scripts.
   - **`.github/`:** Reserved for GitHub Actions configurations that reference `.dagger/`.

### Code Quality

1. **Go Code:**

   - Follow idiomatic Go practices.
   - Ensure all changes pass linting and formatting checks.
   - Write unit tests for all new or modified functionality.
   - **Import Dagger modules correctly:** Always use the import path `dagger/<module>/internal/dagger` instead of `dagger.io/dagger`.
   - **Module Naming Convention:** Ensure the `module` directive in `go.mod` follows the format `module dagger/<module_name>` instead of `module github.com/felipepimentel/daggerverse/<module_name>`.

2. **Dagger Workflows:**

   - Keep workflows modular and reusable.
   - Ensure pipelines are well-documented and tested.
   - **Version Requirements:** Ensure the Dagger version is `0.15.1` and Go version is `1.23.2`. Validate this in all configurations.

3. **Documentation:**
   - Update README and module-specific documentation as necessary.
   - Clearly explain the purpose and usage of all modules and workflows.
   - Highlight the correct import paths, module naming conventions, and required versions for Go and Dagger.
