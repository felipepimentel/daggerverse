// Package main provides a complete CI/CD pipeline for Python projects using Poetry.
// It orchestrates the build, test, versioning, and publishing processes by integrating
// with specialized modules: python-builder, python-versioner, and python-publisher.
package main

import (
	"context"

	"dagger.io/dagger"
	builder "github.com/felipepimentel/daggerverse/python-builder"
	publisher "github.com/felipepimentel/daggerverse/python-publisher"
	versioner "github.com/felipepimentel/daggerverse/python-versioner"
)

// Python represents the main module configuration for Python CI/CD pipelines.
// It integrates build, versioning, and publishing capabilities into a single workflow.
type Python struct {
	// PackagePath specifies the path to the Python package within the source directory.
	// This path should contain the pyproject.toml file.
	PackagePath string
}

// CICD executes the complete CI/CD pipeline for a Python project.
// The pipeline consists of three main stages:
// 1. Build and test using python-builder
// 2. Version bump using python-versioner (semantic-release)
// 3. Package publishing using python-publisher (PyPI)
//
// Required environment variables:
// - PYPI_TOKEN: PyPI authentication token for publishing packages
// - GITHUB_TOKEN: GitHub token for semantic-release operations
//
// Parameters:
// - ctx: The context for the operation
// - source: The source directory containing the Python project
// - token: The PyPI authentication token
//
// Returns:
// - string: The new version number generated by semantic-release
// - error: Any error that occurred during the pipeline execution
func (m *Python) CICD(ctx context.Context, source *dagger.Directory, token *dagger.Secret) (string, error) {
	// Create module instances
	builder := &builder.PythonBuilder{PackagePath: m.PackagePath}
	versioner := &versioner.PythonVersioner{}
	publisher := &publisher.PythonPublisher{PackagePath: m.PackagePath}

	// Build and test stage
	if err := builder.Build(ctx, source); err != nil {
		return "", err
	}

	// Version bump stage
	version, err := versioner.BumpVersion(ctx, source)
	if err != nil {
		return "", err
	}

	// Publish stage
	if err := publisher.Publish(ctx, source, token); err != nil {
		return "", err
	}

	return version, nil
}
