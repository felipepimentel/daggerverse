name: Release
on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: set-matrix
        run: |
          # Get list of directories containing dagger.json
          MODULES=$(find . -name "dagger.json" -exec dirname {} \; | sed 's|^./||' | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=${MODULES}" >> $GITHUB_OUTPUT

  release:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }}
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    name: Release ${{ matrix.module }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/exec

      - name: Get changed files in module
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files: ${{ matrix.module }}/**

      - name: Create Release
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODULE_PATH: ${{ matrix.module }}
          MODULE_NAME: ${{ matrix.module }}
        run: npx semantic-release

  # Opcional: Atualizar o Daggerverse após releases
  update-daggerverse:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v5
        with:
          version: "latest"

      - name: Update Daggerverse
        run: |
          # Para cada módulo que foi atualizado
          for module in $(find . -name "dagger.json" -exec dirname {} \;); do
            if [ -d "$module" ]; then
              cd $module
              dagger mod publish
              cd -
            fi
          done
