name: Reusable Documentation Workflow

on:
  workflow_call:
    inputs:
      generator:
        description: 'Documentation generator to use (just-the-docs, mkdocs, sphinx)'
        required: true
        type: string
      ruby_version:
        description: 'Ruby version for Just The Docs'
        required: false
        type: string
        default: '3.3'
      python_version:
        description: 'Python version for MkDocs/Sphinx'
        required: false
        type: string
        default: '3.12'
      source_dir:
        description: 'Directory containing documentation source'
        required: false
        type: string
        default: 'docs'
      base_url:
        description: 'Base URL for the documentation'
        required: false
        type: string
        default: ''
      strict_mode:
        description: 'Enable strict mode (for MkDocs)'
        required: false
        type: boolean
        default: true
      minify:
        description: 'Enable HTML minification'
        required: false
        type: boolean
        default: true
      git_revision_date:
        description: 'Include git revision date (for MkDocs)'
        required: false
        type: boolean
        default: true
      environment:
        description: 'GitHub environment to deploy to'
        required: false
        type: string
        default: 'github-pages'
      poetry_version:
        description: 'Poetry version for Sphinx'
        required: false
        type: string
        default: 'latest'
      poetry_virtualenvs_in_project:
        description: 'Create virtualenvs in project directory for Poetry'
        required: false
        type: boolean
        default: true
      poetry_groups:
        description: 'Poetry dependency groups to install'
        required: false
        type: string
        default: 'dev,docs'
    secrets:
      token:
        description: 'GitHub token for deployment'
        required: true

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.generator == 'mkdocs' && '0' || '1' }}
      
      # Just The Docs Setup
      - name: Setup Ruby
        if: inputs.generator == 'just-the-docs'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ inputs.ruby_version }}
          bundler-cache: true
          working-directory: ${{ inputs.source_dir }}
          cache-version: 1
      
      # Python Setup for MkDocs/Sphinx
      - name: Set up Python
        if: inputs.generator == 'mkdocs' || inputs.generator == 'sphinx'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      
      # MkDocs Setup
      - name: Install Dagger CLI
        if: inputs.generator == 'mkdocs'
        uses: dagger/dagger-for-github@v5
        with:
          version: "0.9.3"
      
      # Sphinx Setup
      - name: Install Poetry
        if: inputs.generator == 'sphinx'
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry_version }}
          virtualenvs-create: true
          virtualenvs-in-project: ${{ inputs.poetry_virtualenvs_in_project }}
      
      # Build Steps
      - name: Build with Jekyll
        if: inputs.generator == 'just-the-docs'
        run: |
          cd ${{ inputs.source_dir }}
          bundle config set --local path 'vendor/bundle'
          bundle install
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --trace
        env:
          JEKYLL_ENV: production
      
      - name: Build with MkDocs
        if: inputs.generator == 'mkdocs'
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          cat << EOF > config.json
          {
            "source": "${{ inputs.source_dir }}",
            "pythonVersion": "${{ inputs.python_version }}",
            "baseURL": "${{ inputs.base_url }}",
            "strict": ${{ inputs.strict_mode }},
            "minify": ${{ inputs.minify }},
            "gitRevisionDate": ${{ inputs.git_revision_date }}
          }
          EOF

          dagger call --progress=plain \
            --source "${{ inputs.source_dir }}" \
            build \
            --config config.json
      
      - name: Build with Sphinx
        if: inputs.generator == 'sphinx'
        run: |
          poetry install --with ${{ inputs.poetry_groups }}
          cd ${{ inputs.source_dir }}
          poetry run make html
      
      # Common Steps
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: >-
            ${{
              inputs.generator == 'just-the-docs' && format('{0}/_site', inputs.source_dir) ||
              inputs.generator == 'mkdocs' && './site' ||
              inputs.generator == 'sphinx' && format('{0}/build/html', inputs.source_dir)
            }}
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.token }} 